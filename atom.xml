<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Something Witty]]></title>
  <link href="http://ElPiloto.github.io/atom.xml" rel="self"/>
  <link href="http://ElPiloto.github.io/"/>
  <updated>2014-02-09T00:48:26-05:00</updated>
  <id>http://ElPiloto.github.io/</id>
  <author>
    <name><![CDATA[Luis R. Piloto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tmux command-completion at bash prompt!]]></title>
    <link href="http://ElPiloto.github.io/blog/2013/05/16/tmux-command-completion-at-bash-prompt/"/>
    <updated>2013-05-16T00:00:00-04:00</updated>
    <id>http://ElPiloto.github.io/blog/2013/05/16/tmux-command-completion-at-bash-prompt</id>
    <content type="html"><![CDATA[<p>After checking out git&#8217;s amazing git command-completion and my <a href="http://sageagainstthemachine.us/blog/2013/04/26/adding-tab-completion-for-your-bash-scripts/">recent discovery</a> of how to implement your own command-completion for bash scripts, I began to wonder why tmux didn&#8217;t have this feature.  After some searching, I found that the tmux installation includes a script file for command-completion in bash!  In the tmux-1.8 distribution, you should find a folder titled &#8220;examples&#8221; which contains a file &#8220;bash_completion_tmux.sh&#8221;.  Just source this file in your .bashrc and you&#8217;re done!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tmux Command Completion At Bash Prompt]]></title>
    <link href="http://ElPiloto.github.io/blog/2013/05/16/tmux-command-completion-at-bash-prompt/"/>
    <updated>2013-05-16T00:00:00-04:00</updated>
    <id>http://ElPiloto.github.io/blog/2013/05/16/tmux-command-completion-at-bash-prompt</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM Tips: Editing macros, sessions, command-line registers, & a new register!]]></title>
    <link href="http://ElPiloto.github.io/blog/2013/04/30/vim-tips-editing-macros-sessions-command-line-registers--a-new-register/"/>
    <updated>2013-04-30T00:00:00-04:00</updated>
    <id>http://ElPiloto.github.io/blog/2013/04/30/vim-tips-editing-macros-sessions-command-line-registers&#8211;a-new-register</id>
    <content type="html"><![CDATA[<p><strong>1. Edit macro:</strong></p>
<p><span>Record macro to register f:</span> qf to start recording macro to register f</p>
<p><span>Specify macro:</span> &lt;Random macro commands of your choosing&gt;</p>
<p><span>Stop recording macro:</span> q</p>
<p><span>Open new area to modify macro and paste it:</span></p>
<ul><li>:sp new</li>
<li>&#8220;f (this is the magic here - I didn&#8217;t realize macros were just stored as characters in a register!)</li>
</ul><p><span>Edit macro:</span> &lt;Random macro modifications&gt;<br/><span>Select macro:</span> &lt;Your favorite method for selecting the edited macro&gt;<br/><span>Yank macro back to register f:</span> &#8220;fy<br/><span>Use updated macro:</span> @f</p>
<p>TADA!</p>
<p><strong>2. Vim Sessions: </strong></p>
<p>You can use the :mksession command to create a vim script that will restore your current editing session.  By default, :mksession will save your currently opened buffers, the current directory, tabs, splits, and folds you have open, but you can add more things by modifying the &#8220;sessionoptions&#8221; variable.  You can save multiple sessions by calling the :mksession command with an argument specifying the session name, which you can later invoke to load a particular session.</p>
<p><span>Example 1: Using the generic session specifier</span></p>
<p>Open up vim and open up a few tabs or splits or whatever you normally do when your coding.</p>
<p>Save the session: :mksession - this will save our session to a file named Session.vim, which is the default session name.</p>
<p>Quit vim: :qa</p>
<p>Start vim with the default session name: vim -S</p>
<p>TADA!</p>
<p>Example 2: Saving and loading a specific session:</p>
<p>Just like before, open up vim normally and open up random tabs and files and splits and whatchamajiggers.</p>
<p>Save the session with the name your_splits_give_them_to_me: :mks your_splits_give_them_to_me (Notice that we can specify a file name that doesn&#8217;t end in .vim and also that we can abbreviate :mksession to :mks)</p>
<p>Quit vim: :qa</p>
<p>Start vim with the session name your_splits_give_them_to_me: vim -S your_splits_give_them_to_me</p>
<p>TADA!<strong><br/></strong></p>
<p><strong>3. COMBO SECTION: Paste register into the command line and the new register I learned!</strong></p>
<p>Sometimes it&#8217;s useful to use the contents of a register in a command.  For instance, let&#8217;s say you&#8217;re editing a bash script, <em>bludgeon.sh</em>, and you want to actually test it before you continue adding functionality to the script.</p>
<ul><li>How a naive user might do this:</li>
</ul><p>           Exit vim<br/>           Execute the script: bash bludgeon.sh<br/>           Open the file in vim again: vim bludgeon.sh</p>
<ul><li>How a less naive user might do this:</li>
</ul><p>           Execute a command from the terminal using vim&#8217;s filter (!) by typing: &#8220;:! bash bludgeon.sh&#8221;</p>
<ul><li>How I would do this:</li>
</ul><p>           Instead of typing out bludgeon.sh, use the special % register to paste the filename into vim&#8217;s command line:</p>
<p>           &#8221;:! bash &lt;Ctrl-r&gt;%&#8221;</p>
<p>That explains two tips:</p>
<p>The % register which contains the name of the file you&#8217;re currently editing.</p>
<p>Pasting a register into vim&#8217;s command-line: &lt;Ctrl-r&gt; register</p>
<p>TADA!  Happy VIM&#8217;ing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding tab completion for your bash scripts]]></title>
    <link href="http://ElPiloto.github.io/blog/2013/04/26/adding-tab-completion-for-your-bash-scripts/"/>
    <updated>2013-04-26T00:00:00-04:00</updated>
    <id>http://ElPiloto.github.io/blog/2013/04/26/adding-tab-completion-for-your-bash-scripts</id>
    <content type="html"><![CDATA[<a href="http://tldp.org/LDP/abs/html/tabexpansion.html">Adding tab completion for your bash scripts</a><br/><p>Just this morning I was wondering how git tab-completes it&#8217;s subcommands and then today I see this link on reddit!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[15 Linux Bash History Expansion Examples You Should Know]]></title>
    <link href="http://ElPiloto.github.io/blog/2013/04/22/15-linux-bash-history-expansion-examples-you-should-know/"/>
    <updated>2013-04-22T00:00:00-04:00</updated>
    <id>http://ElPiloto.github.io/blog/2013/04/22/15-linux-bash-history-expansion-examples-you-should-know</id>
    <content type="html"><![CDATA[<a href="http://www.thegeekstuff.com/2011/08/bash-history-expansion/">15 Linux Bash History Expansion Examples You Should Know</a><br/><p><blockquote class="link_og_blockquote">Bash history is very powerful. Understanding how to effectively use the bash history expansions will make you extremely productive on the Linux command</blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM: Substitute Teacher]]></title>
    <link href="http://ElPiloto.github.io/blog/2013/03/01/vim-substitute-teacher/"/>
    <updated>2013-03-01T00:00:00-05:00</updated>
    <id>http://ElPiloto.github.io/blog/2013/03/01/vim-substitute-teacher</id>
    <content type="html"><![CDATA[<p>When people learn vim it&#8217;s pretty common to learn search and replace, typically taught in this form:</p>
<p><em>:%s/food/ramen noodles, again/g</em></p>
<p>This will search through the entire file and replace the phrase <em>food</em> with <em>ramen noodles, again</em>.  People even go as far as to learn the following variant which asks for confirmation before replacing each instance:</p>
<p><em>:%s/food/ramen noodles, again/gc</em></p>
<p>Some people might even know that the g at the end tells vim to replace every instance on a line (omitting the g tells vim to replace only the first occurrence on each line). However, what people often don&#8217;t learn is how truly customizable this command is.</p>
<p><span><strong>#1 Crouching Tiger, Hidden Feature:</strong> </span>You can use (almost) any character as a delimiter.</p>
<p>I always thought you had to use <em>/</em> as the delimiter, but it turns out you can use any character (except for space and alphanumeric characters).  So we could do the following in place of the above:     </p>
<ul><li><em>:%s+food+ramen noodles, again+g</em><br/>                 OR</li>
<li><em>:%s|food|ramen noodles, again|g</em></li>
</ul><p>Why would we want to use this?  Well, if you ever wanted to use <em>/</em> as part of your search or replace expressions, you would have to escape it using vim&#8217;s escape character (backslash) .  Let&#8217;s assume we want to replace each instance of / with ./ To accomplish that, we&#8217;d have to do the following if we stuck with the default delimiter:</p>
<ul><li><em>:%s/\//.\//g</em></li>
</ul><p>However, if we used an alternative delimiter, such as <em>@</em> we would have an expression which is much easier to use, read, and type:</p>
<ul><li><em>:%s@/@./@g</em></li>
</ul><p>No escaping needed, tada!</p>
<p><span><strong>#2 That&#8217;s Not a Bug, That&#8217;s a Feature:</strong></span> You don&#8217;t always have to include a search pattern!</p>
<p>Let&#8217;s say you previously looked for <em>&#8220;a_good_time&#8221;</em> using this command:</p>
<ul><li><em>/a_good_time</em></li>
</ul><p>And after some time you decide you want to replace it with something more specific, you could use the following command:</p>
<ul><li><em>:%s//coke_and_hookers/g</em><br/>                 OR equivalently</li>
<li><em>:%s^^coke_and_hookers^g</em></li>
</ul><p>When you don&#8217;t specify a search expression in the substitute command, vim automatically uses the last value you searched (or substituted for) as the search expression!</p>
<p><strong><u>#3 The Feature Is In Your Hands:</u> </strong>You can manipulate the range on which substitutions take place!</p>
<p>The generic version of substitute uses % as the range, which means the entire file, but vim allows much more flexibity in specifying the range.  How do we specify ranges?  Quite intuitively! Ranges can be specified from a starting point to an ending point, thus the only thing to really learn is to specify these points.  They are as follows:</p>
<ul><li>.  the current line number</li>
<li><em>$</em> the last line in the file</li>
<li><em>%</em> the entire file</li>
<li>any number specifies that line number in the file</li>
<li><em>&#8216;t</em> would specify the location of marker t (markers are a way of marking locations in the file so you can return to them later)</li>
<li><em>/some_pattern</em> would go to the next line where we find the string &#8220;some_pattern&#8221;</li>
<li><em>?some_pattern</em> would go to the previous line where we find the string &#8220;some_pattern&#8221;</li>
</ul><p>You specify ranges as points separated by a comma.  Here are some example ranges as used in a substitution command:</p>
<ul><li><em>:1,3s/hello/goodbye/g</em> - this would replace all instances of hello with goodbye on lines 1-3 of our file</li>
<li><em>:1,$s/hello/goodbye/g</em> - this would search through the entire file <strong>Note</strong> that <em>1,$</em> is equivalent to <em>%</em></li>
<li><em>:1,.s/hello/goodbye/g</em> - this would search from the beginning of our file to the current line</li>
<li><em>:.,/aloha/s/hello/goodbye/g</em> - this would search from the current line to the first line after the current line containing <em>aloha </em>in it and replace hello with goodbye</li>
</ul><p><strong>Note</strong>: If you specify a range that goes backwards, vim will prompt you to reverse the order.</p>
<p>And there you have it! Now you can be pickier with your substitutions than a vegan on an airplane.  Next on your to do list should be learning vim regular expressions, specifically escape characters and quantifiers (for advanced searching) and grouping and backreferences (for advanced replacing).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM Tips: DiffOrig a.k.a. What the crap changes did I make?]]></title>
    <link href="http://ElPiloto.github.io/blog/2013/01/09/vim-tips-difforig-aka-what-the-crap-changes-did-i-make/"/>
    <updated>2013-01-09T00:00:00-05:00</updated>
    <id>http://ElPiloto.github.io/blog/2013/01/09/vim-tips-difforig-aka-what-the-crap-changes-did-i-make</id>
    <content type="html"><![CDATA[<p>Sometimes I&#8217;ll come back to my computer (usually from getting coffee or a pensive pacing session) and see that I&#8217;ve made changes to a file in vim without actually saving those changes.  Did I forget to save actual edits to the file or did I happen to mash on my keyboard accidentally while vim was in the foreground?  </p>
<p>To check what you&#8217;ve changed since the last time you saved a file, you can use the following command to pull up a diff of the file contents on disk against the file contents open in your vim buffer:</p>
<blockquote>
<p>:DiffOrig</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Where’s the bus? Oh, it’s not coming yet. But what the hell, that guy looking down the street totally looked like he saw the bus coming.  What’s wrong with him, does he not know how to wait for the bus?]]></title>
    <link href="http://ElPiloto.github.io/blog/2012/12/12/wheres-the-bus-oh-its-not-coming-yet-but-what-the-hell-that-guy-looking-down-the-street-totally-looked-like-he-saw-the-bus-coming--whats-wrong-with-him-does-he-not-know-how-to-wait-for-the-bus/"/>
    <updated>2012-12-12T00:00:00-05:00</updated>
    <id>http://ElPiloto.github.io/blog/2012/12/12/wheres-the-bus-oh-its-not-coming-yet-but-what-the-hell-that-guy-looking-down-the-street-totally-looked-like-he-saw-the-bus-coming&#8211;whats-wrong-with-him-does-he-not-know-how-to-wait-for-the-bus</id>
    <content type="html"><![CDATA[<blockquote>Where&#8217;s the bus? Oh, it&#8217;s not coming yet. But what the hell, that guy looking down the street totally looked like he saw the bus coming.  What&#8217;s wrong with him, does he not know how to wait for the bus?</blockquote>&#8212;my train of thought while waiting for the bus this morning&#8230;the human condition is cruelly volatile and arbitrary, and in being so, also hilarious.
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Whoring the Matlab File Exchange Pick of the Week Blog]]></title>
    <link href="http://ElPiloto.github.io/blog/2012/10/21/whoring-the-matlab-file-exchange-pick-of-the-week-blog/"/>
    <updated>2012-10-21T00:00:00-04:00</updated>
    <id>http://ElPiloto.github.io/blog/2012/10/21/whoring-the-matlab-file-exchange-pick-of-the-week-blog</id>
    <content type="html"><![CDATA[<p>As an avid Matlab user, I frequently supplement the built-in functionality with source code from <a href="http://www.mathworks.com/matlabcentral/fileexchange/">Matlab&#8217;s File Exchange</a>.  Sometimes it&#8217;s simple, but extremely convenient functionality I&#8217;d rather not code myself, such as <a href="http://www.mathworks.com/matlabcentral/fileexchange/3218-mtit-a-pedestrian-major-title-creator">mtit</a>.  Sometimes it&#8217;s more esoteric code specific to a domain or file standard that I&#8217;d never code myself such as <a href="http://www.mathworks.com/matlabcentral/fileexchange/7401-scalable-vector-graphics-svg-export-of-figures">plot2svg</a>.  All in all, Matlab&#8217;s File Exchange has proven to be a real resource.  However, for the longest time, I only acquired new File Exchange code when I explicitly needed functionality unavailable in Matlab.  </p>
<p>But that&#8217;s only half the benefit of the File Exchange.  There are libraries upon libraries of code on the internet aimed at providing functionality users wouldn&#8217;t ever imagine (think jQuery or any of a million web frameworks aimed at adding radically simplified interfaces to a unified combination of programming elements).  Given that I might benefit from code I didn&#8217;t even know existed, how could these unsung ones-and-zeroes be brought to my attention?  </p>
<p>Enter <a href="http://blogs.mathworks.com/pick/">Matlab&#8217;s File Exchange Pick of the Week blog</a>.  Each Friday, one of two Matlab employees ( Brett &amp; Jiro ) posts about his &#8220;favorite user-contributed submissions from the File Exchange.&#8221;  Once I found this blog, I subscribed to its feed and now every Friday I eagerly await what goodie will be bestowed upon me next.</p>
<p>Unfortunately, the last few blog posts have garnered my disdain.  Instead of the usually useful picks, Brett and Jiro have chosen poorly veiled &#8220;picks&#8221; that promote Matlab&#8217;s new Apps feature.  </p>
<ul><li>Oh hey all you scientific programmers, check out this arcade-style shooter written in Matlab - did we mention it&#8217;s the first user-contributed App?<br/> </li>
<li>Matlab users: if you found galaga useful for analyzing data, look at this map-of-the-stars file exchange submission written by one of the Matlab employees that&#8217;s actually an App, a new feature in Matlab!!<br/> </li>
<li>Check out this, user-submitted content: it&#8217;s an App centered on two e-books written by one of Matlab&#8217;s original authors, Cleve.  Don&#8217;t worry, the App itself is also written by Cleve so you know it&#8217;s user-submitted.</li>
</ul><p>It&#8217;s their company and their blog, they can do what they want with it, but I can&#8217;t help but feel slightly wronged.  I can&#8217;t really speculate on possible repercussions this not so subtle corporate whoring might have - Matlab has entrenched itself as a mission critical part of so many getups - but I hope maybe this post will make the point to the folks at Mathworks that they should consider treating us with respect instead of somehow believing that they can covertly advertise through a medium we <strong>choose</strong> to subscribe to under the pretenses that it will contain <em>actual</em> utility.  I&#8217;m not calling anyone a bad person or particularly furious about the situation, it&#8217;s more of a &#8220;shame on you&#8221; kinda thing.  Did I mention Matlab has a new Apps feature?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MATLAB: Unpack cell array to function arguments]]></title>
    <link href="http://ElPiloto.github.io/blog/2012/09/01/matlab-unpack-cell-array-to-function-arguments/"/>
    <updated>2012-09-01T00:00:00-04:00</updated>
    <id>http://ElPiloto.github.io/blog/2012/09/01/matlab-unpack-cell-array-to-function-arguments</id>
    <content type="html"><![CDATA[<p>I recently found myself needing to pass the contents of a variable length cell array as arguments to a function that accepted a variable number of arguments (via Matlab&#8217;s <a href="http://www.mathworks.com/help/techdoc/ref/varargin.html" target="_blank">varargin</a> functionality).  I thought this would be a real problem, but was astonished at how easy it was.</p>
<p>Assuming we have a cell array defined as follows:</p>
<blockquote>
<p>my_cell_array = {&#8216;You&#8217;, &#8216;Say&#8217;, &#8216;Aloha&#8217;, &#8216;I&#8217;, &#8216;Say&#8217;, &#8216;Aloha&#8217;};</p>
</blockquote>
<p>And that we&#8217;re trying to call Matlab&#8217;s <a href="http://www.mathworks.com/help/techdoc/ref/load.html" target="_blank">load()</a> function with the following form:</p>
<blockquote>
<p>load(filename, varargin)</p>
</blockquote>
<p>All we have to do is the following:</p>
<blockquote>
<p>load(&#8216;some_random_matlab_file.mat&#8217;, my_cell_array{:})</p>
</blockquote>
<p>And that&#8217;s all it takes.  Just in case you&#8217;re curious, the particular use case that led me to need this functionality was that I needed to load a list of user specified variables from a .mat file in a toolbox I&#8217;m working on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM Plugin of the week: NERDtree]]></title>
    <link href="http://ElPiloto.github.io/blog/2012/06/28/vim-plugin-of-the-week-nerdtree/"/>
    <updated>2012-06-28T00:00:00-04:00</updated>
    <id>http://ElPiloto.github.io/blog/2012/06/28/vim-plugin-of-the-week-nerdtree</id>
    <content type="html"><![CDATA[<a href="https://github.com/scrooloose/nerdtree#readme">VIM Plugin of the week: NERDtree</a><br/><p>I was at Hack n&#8217; Jill last week and a friend told me about NERDtree, a VIM plugin for easily exploring any project hierarchy in vim.  It&#8217;s super easy to install, there&#8217;s no reason not to try this out.  Definitely take advantage of the bookmark feature which acts like shortcuts to your favorite project files/directories.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MATLAB Programming/Struct Arrays - Wikibooks, open books for an open world]]></title>
    <link href="http://ElPiloto.github.io/blog/2012/06/28/matlab-programmingstruct-arrays---wikibooks-open-books-for-an-open-world/"/>
    <updated>2012-06-28T00:00:00-04:00</updated>
    <id>http://ElPiloto.github.io/blog/2012/06/28/matlab-programmingstruct-arrays&#8212;wikibooks-open-books-for-an-open-world</id>
    <content type="html"><![CDATA[<a href="http://en.wikibooks.org/wiki/MATLAB_Programming/Struct_Arrays">MATLAB Programming/Struct Arrays - Wikibooks, open books for an open world</a><br/><p>In Matlab, working with arrays of structs can be quite unintuitive - this page had some very helpful tips.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solarized: A Must Have Color Scheme For Gnome Terminal, Vim, Gedit And Lots More ~ Web Upd8: Ubuntu / Linux blog]]></title>
    <link href="http://ElPiloto.github.io/blog/2012/06/26/solarized-a-must-have-color-scheme-for-gnome-terminal-vim-gedit-and-lots-more--web-upd8-ubuntu--linux-blog/"/>
    <updated>2012-06-26T00:00:00-04:00</updated>
    <id>http://ElPiloto.github.io/blog/2012/06/26/solarized-a-must-have-color-scheme-for-gnome-terminal-vim-gedit-and-lots-more&#8211;web-upd8-ubuntu&#8211;linux-blog</id>
    <content type="html"><![CDATA[<a href="http://www.webupd8.org/2011/04/solarized-must-have-color-paletter-for.html">Solarized: A Must Have Color Scheme For Gnome Terminal, Vim, Gedit And Lots More ~ Web Upd8: Ubuntu / Linux blog</a><br/><p>How to get Solarized Color Scheme Working With Gnome-Terminal and Vim</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove A Software Repo From Yum:]]></title>
    <link href="http://ElPiloto.github.io/blog/2012/06/26/remove-a-software-repo-from-yum/"/>
    <updated>2012-06-26T00:00:00-04:00</updated>
    <id>http://ElPiloto.github.io/blog/2012/06/26/remove-a-software-repo-from-yum</id>
    <content type="html"><![CDATA[<p>I recently had to remove the Livna repo from yum because I found it was unresponsive and, more importantly, had been fused into rpmfusion.  Thus, to remove a repo, get use sudo (or su) to remove the file:</p>
<blockquote>
<p>rm <span>/etc/yum.repos.d/REPONAMEHERE.repo</span></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM Tips: Jump between cursor positions]]></title>
    <link href="http://ElPiloto.github.io/blog/2012/06/21/vim-tips-jump-between-cursor-positions/"/>
    <updated>2012-06-21T00:00:00-04:00</updated>
    <id>http://ElPiloto.github.io/blog/2012/06/21/vim-tips-jump-between-cursor-positions</id>
    <content type="html"><![CDATA[<p>Just recently had to look up how to return to my cursor position after jumping to the beginning of my file.</p>
<blockquote>
<p>Jump to old/prev cursor position: Ctrl + o <br/>Jump to new/next cursor position: Ctrl + i </p>
</blockquote>
<p>Sample usage scenario: You need to look up a variable definition at the top of your file.</p>
<ol><li>Type &#8220;gg&#8221; to jump to the beginning of your file</li>
<li>Once you&#8217;ve seen your variable name, simply type &#8220;Ctrl + o&#8221; to jump back to where you were.</li>
<li>Someone in your office farted and in your laughter you forgot the variable name again! Hit &#8220;Ctrl + i&#8221; to jump back to the top of the file and then hit &#8220;Ctrl + o&#8221; to go back to your position further down into the file.</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Check hard drive specs on linux:]]></title>
    <link href="http://ElPiloto.github.io/blog/2012/06/20/check-hard-drive-specs-on-linux/"/>
    <updated>2012-06-20T00:00:00-04:00</updated>
    <id>http://ElPiloto.github.io/blog/2012/06/20/check-hard-drive-specs-on-linux</id>
    <content type="html"><![CDATA[<p>I recently needed to check whether or not my computer&#8217;s hard drive was IDE or SATA.  Some googling and poking around led me to this.  </p>
<blockquote>
<p>sudo hdparm -I /dev/sda</p>
</blockquote>
<p>You can replace /dev/sda with any other hard drives you may have (e.g. /dev/sdb).  This output will give you the devices model number, which allows you to look up the specifics online.  If anyone knows a shorter way of checking for IDE vs. SATA, let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solarized Color Scheme For Matlab]]></title>
    <link href="http://ElPiloto.github.io/blog/2012/06/19/solarized-color-scheme-for-matlab/"/>
    <updated>2012-06-19T00:00:00-04:00</updated>
    <id>http://ElPiloto.github.io/blog/2012/06/19/solarized-color-scheme-for-matlab</id>
    <content type="html"><![CDATA[<a href="https://github.com/Chrismarsh/matlab-solarized">Solarized Color Scheme For Matlab</a><br/>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checking vim runtime]]></title>
    <link href="http://ElPiloto.github.io/blog/2012/06/19/checking-vim-runtime/"/>
    <updated>2012-06-19T00:00:00-04:00</updated>
    <id>http://ElPiloto.github.io/blog/2012/06/19/checking-vim-runtime</id>
    <content type="html"><![CDATA[<p>How to check vim runtime:</p>
<blockquote>
<p><span>:set runtimepath?</span></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tcsh color prompt example]]></title>
    <link href="http://ElPiloto.github.io/blog/2012/06/18/tcsh-color-prompt-example/"/>
    <updated>2012-06-18T00:00:00-04:00</updated>
    <id>http://ElPiloto.github.io/blog/2012/06/18/tcsh-color-prompt-example</id>
    <content type="html"><![CDATA[<p><div>
<blockquote>
<pre class="bbcodeblock"> set prompt = "%{\033[32m%}${USER}%{\033[0m%}@%m %{\033[35m%}(%~)%{\033[0m%} &gt; "</pre>
</blockquote>
</div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Change Bash Color Prompt]]></title>
    <link href="http://ElPiloto.github.io/blog/2012/06/18/change-bash-color-prompt/"/>
    <updated>2012-06-18T00:00:00-04:00</updated>
    <id>http://ElPiloto.github.io/blog/2012/06/18/change-bash-color-prompt</id>
    <content type="html"><![CDATA[<a href="http://www.cyberciti.biz/faq/bash-shell-change-the-color-of-my-shell-prompt-under-linux-or-unix/">Change Bash Color Prompt</a><br/>
]]></content>
  </entry>
  
</feed>
